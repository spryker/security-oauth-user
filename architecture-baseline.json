[
    {
        "fileName": "src/Spryker/Zed/SecurityOauthUser/Communication/Plugin/Security/Authenticator/OauthUserTokenAuthenticator.php",
        "description": "Method `Spryker\\Zed\\SecurityOauthUser\\Communication\\Plugin\\Security\\Authenticator\\OauthUserTokenAuthenticator::createAuthenticatedToken()` must have return type.",
        "rule": "ExternalMethodExtensionReturnTypeRule",
        "ruleset": "Spryker",
        "priority": "1"
    },
    {
        "fileName": "src/Spryker/Zed/SecurityOauthUser/Communication/Plugin/Security/Authenticator/OauthUserTokenAuthenticator.php",
        "description": "Method `Spryker\\Zed\\SecurityOauthUser\\Communication\\Plugin\\Security\\Authenticator\\OauthUserTokenAuthenticator::supports()` must have return type.",
        "rule": "ExternalMethodExtensionReturnTypeRule",
        "ruleset": "Spryker",
        "priority": "1"
    },
    {
        "fileName": "src/Spryker/Zed/SecurityOauthUser/Communication/Plugin/Security/Authenticator/OauthUserTokenAuthenticator.php",
        "description": "Method `Spryker\\Zed\\SecurityOauthUser\\Communication\\Plugin\\Security\\Authenticator\\OauthUserTokenAuthenticator::getUser()` must have return type.",
        "rule": "ExternalMethodExtensionReturnTypeRule",
        "ruleset": "Spryker",
        "priority": "1"
    },
    {
        "fileName": "src/Spryker/Zed/SecurityOauthUser/Communication/Plugin/Security/Authenticator/OauthUserTokenAuthenticator.php",
        "description": "Method `Spryker\\Zed\\SecurityOauthUser\\Communication\\Plugin\\Security\\Authenticator\\OauthUserTokenAuthenticator::checkCredentials()` must have return type.",
        "rule": "ExternalMethodExtensionReturnTypeRule",
        "ruleset": "Spryker",
        "priority": "1"
    },
    {
        "fileName": "src/Spryker/Zed/SecurityOauthUser/Communication/Plugin/Security/Authenticator/OauthUserTokenAuthenticator.php",
        "description": "Method `Spryker\\Zed\\SecurityOauthUser\\Communication\\Plugin\\Security\\Authenticator\\OauthUserTokenAuthenticator::onAuthenticationSuccess()` must have return type.",
        "rule": "ExternalMethodExtensionReturnTypeRule",
        "ruleset": "Spryker",
        "priority": "1"
    },
    {
        "fileName": "src/Spryker/Zed/SecurityOauthUser/Communication/Plugin/Security/Authenticator/OauthUserTokenAuthenticator.php",
        "description": "Method `Spryker\\Zed\\SecurityOauthUser\\Communication\\Plugin\\Security\\Authenticator\\OauthUserTokenAuthenticator::onAuthenticationFailure()` must have return type.",
        "rule": "ExternalMethodExtensionReturnTypeRule",
        "ruleset": "Spryker",
        "priority": "1"
    },
    {
        "fileName": "src/Spryker/Zed/SecurityOauthUser/Communication/Plugin/Security/Authenticator/OauthUserTokenAuthenticator.php",
        "description": "Method `Spryker\\Zed\\SecurityOauthUser\\Communication\\Plugin\\Security\\Authenticator\\OauthUserTokenAuthenticator::start()` must have return type.",
        "rule": "ExternalMethodExtensionReturnTypeRule",
        "ruleset": "Spryker",
        "priority": "1"
    },
    {
        "fileName": "src/Spryker/Zed/SecurityOauthUser/Communication/Plugin/Security/Authenticator/OauthUserTokenAuthenticator.php",
        "description": "Method `Spryker\\Zed\\SecurityOauthUser\\Communication\\Plugin\\Security\\Authenticator\\OauthUserTokenAuthenticator::supportsRememberMe()` must have return type.",
        "rule": "ExternalMethodExtensionReturnTypeRule",
        "ruleset": "Spryker",
        "priority": "1"
    },
    {
        "fileName": "src/Spryker/Zed/SecurityOauthUser/Communication/Plugin/Security/Provider/OauthUserProvider.php",
        "description": "Method `Spryker\\Zed\\SecurityOauthUser\\Communication\\Plugin\\Security\\Provider\\OauthUserProvider::refreshUser()` must have return type.",
        "rule": "ExternalMethodExtensionReturnTypeRule",
        "ruleset": "Spryker",
        "priority": "1"
    },
    {
        "fileName": "src/Spryker/Zed/SecurityOauthUser/Communication/Plugin/Security/Provider/OauthUserProvider.php",
        "description": "Method `Spryker\\Zed\\SecurityOauthUser\\Communication\\Plugin\\Security\\Provider\\OauthUserProvider::supportsClass()` must have return type.",
        "rule": "ExternalMethodExtensionReturnTypeRule",
        "ruleset": "Spryker",
        "priority": "1"
    },
    {
        "fileName": "src/Spryker/Zed/SecurityOauthUser/Communication/SecurityOauthUserCommunicationFactory.php",
        "description": "`SecurityOauthUserCommunicationFactory::createSecurityBuilderExpander()` in `Spryker\\Zed\\SecurityOauthUser\\Communication\\SecurityOauthUserCommunicationFactory::createSecurityBuilderExpander()` contains 2 new statements which violates rule \"A `create*()` method in factories must contain exactly 1 `new` statement for instantiation.\"",
        "rule": "FactoryCreateContainOneNewRule",
        "ruleset": "Spryker",
        "priority": "1"
    },
    {
        "fileName": "src/Spryker/Zed/SecurityOauthUser/Dependency/Facade/SecurityOauthUserToAclFacadeBridge.php",
        "description": "Bridges: Type should be defined for param `idUser` in method `Spryker\\Zed\\SecurityOauthUser\\Dependency\\Facade\\SecurityOauthUserToAclFacadeBridge::addUserToGroup()`.",
        "rule": "BridgeMethodsRule",
        "ruleset": "Spryker",
        "priority": "2"
    },
    {
        "fileName": "src/Spryker/Zed/SecurityOauthUser/Dependency/Facade/SecurityOauthUserToAclFacadeBridge.php",
        "description": "Bridges: Type should be defined for param `idGroup` in method `Spryker\\Zed\\SecurityOauthUser\\Dependency\\Facade\\SecurityOauthUserToAclFacadeBridge::addUserToGroup()`.",
        "rule": "BridgeMethodsRule",
        "ruleset": "Spryker",
        "priority": "2"
    },
    {
        "fileName": "src/Spryker/Zed/SecurityOauthUser/Dependency/Facade/SecurityOauthUserToAclFacadeBridge.php",
        "description": "Bridges: Method `addUserToGroup()` must have `public function create<DomainEntity>Collection(<DomainEntity>CollectionRequestTransfer): <DomainEntity>CollectionResponseTransfer` signature.",
        "rule": "BridgeFacadeMethodsRule",
        "ruleset": "Spryker",
        "priority": "2"
    },
    {
        "fileName": "src/Spryker/Zed/SecurityOauthUser/Dependency/Facade/SecurityOauthUserToAclFacadeBridge.php",
        "description": "Bridges: Method `findGroup()` must have `public function get<DomainEntity>Collection(<DomainEntity>CriteriaTransfer): <DomainEntity>CollectionTransfer` signature.",
        "rule": "BridgeFacadeMethodsRule",
        "ruleset": "Spryker",
        "priority": "2"
    },
    {
        "fileName": "src/Spryker/Zed/SecurityOauthUser/Dependency/Facade/SecurityOauthUserToMessengerFacadeBridge.php",
        "description": "Bridges: Method `addErrorMessage()` must have `public function create<DomainEntity>Collection(<DomainEntity>CollectionRequestTransfer): <DomainEntity>CollectionResponseTransfer` signature.",
        "rule": "BridgeFacadeMethodsRule",
        "ruleset": "Spryker",
        "priority": "2"
    },
    {
        "fileName": "src/Spryker/Zed/SecurityOauthUser/Dependency/Facade/SecurityOauthUserToUserFacadeBridge.php",
        "description": "Bridges: Method `createUser()` must have `public function create<DomainEntity>Collection(<DomainEntity>CollectionRequestTransfer): <DomainEntity>CollectionResponseTransfer` signature.",
        "rule": "BridgeFacadeMethodsRule",
        "ruleset": "Spryker",
        "priority": "2"
    }
]
